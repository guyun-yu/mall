<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.situ.mall.sys.mapper.DictMapper">

    <resultMap type="DictModel" id="BaseResultMap">
        <result column="id" property="id" />
        <result column="code" property="code" />
        <result column="name" property="name" />
        <result column="descr" property="descr" />
        <result column="parent_code" property="parentCode" />
        <result column="type" property="type" />
    </resultMap>
    
    <resultMap type="DictModel" id="DictResultMap">
        <result column="cate1_code" property="code" />
        <result column="cate1_name" property="name" />
        <result column="cate1_descr" property="descr" />
        <result column="cate1_type" property="type" />
        <collection property="child" ofType="DictModel">
	        <result column="cate2_code" property="code" />
	        <result column="cate2_name" property="name" />
	        <result column="cate2_descr" property="descr" />
	        <result column="cate2_type" property="type" />
	        <collection property="child" ofType="DictModel" resultMap="BaseResultMap" columnPrefix="cate3_"/>
        </collection>
    </resultMap>

    <resultMap type="CategoryModel" id="CategoryResultMap">
        <result column="id" property="id" />
        <result column="code" property="code" />
        <result column="name" property="name" />
        <result column="descr" property="descr" />
        <result column="cate2_name" property="cate2Name" />
        <result column="category2" property="category2" />
        <result column="cate1_name" property="cate1Name" />
        <result column="category1" property="category1" />
    </resultMap>
    
    <sql id="Base_Column">
       code,name,descr,parent_code,type
    </sql>
    
    <sql id="Where_Clause">
       where parent_code != 'preset'
       <if test="id != null">
           and id=#{id}
       </if>
       <if test="type != null">
           and type=#{type}
       </if>
       <if test="code != null and code != ''">
           and code=#{code}
       </if>
       <if test="name != null and name != ''">
           and name like #{name}
       </if>
       <if test="descr != null and descr != ''">
           and descr like #{descr}
       </if>
       <if test="parentCode != null and parentCode != ''">
           and parent_code=#{parentCode}
       </if>
    </sql>
    
    <sql id="Order_By">
       <if test="orderBy != null and orderBy != ''">
           order by ${orderBy}
       </if>
    </sql>
    
    <sql id="Base_Schema">mall</sql>
    <sql id="Base_Table">dict</sql>
    
    <insert id="insert" parameterType="DictModel">
       insert into <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       (<include refid="Base_Column"/>)
       values(#{code},#{name},#{descr},#{parentCode},#{type})
    </insert>
    
    <delete id="delete" parameterType="Object">
       delete from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       where code in ${id}
    </delete>
    
    <delete id="deleteModel" parameterType="DictModel">
       delete from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       <include refid="Where_Clause"/>  
    </delete>
    
    <update id="update" parameterType="DictModel">
       update <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       set name=#{name},descr=#{descr},parent_code=#{parentCode},type=#{type}
       where code=#{code}
    </update>
    
    <update id="updateActive" parameterType="DictModel">
       update <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       <set>
           <if test="name != null and name != ''">
               name=#{name},
           </if>
           <if test="descr != null and descr != ''">
               descr=#{descr},
           </if>
           <if test="parentCode != null and parentCode != ''">
               parent_code=#{parentCode}
           </if>
           <if test="type != null">
               type=#{type}
           </if>
       </set>
       where code=#{code}
    </update>
    
    <select id="selectAllCate" resultMap="DictResultMap" parameterType="Object">
    select d1.code as cate1_code,d1.name as cate1_name,d1.descr as cate1_descr,d1.type as cate1_type,
	       d2.code as cate2_code,d2.name as cate2_name,d2.descr as cate2_descr,d2.type as cate2_type,
	       d3.code as cate3_code,d3.name as cate3_name,d3.descr as cate3_descr,d3.type as cate3_type
	from <include refid="Base_Schema"/>.<include refid="Base_Table"/>as d1 
	     left join <include refid="Base_Schema"/>.<include refid="Base_Table"/> as d2 on d1.code = d2.parent_code
	     left join <include refid="Base_Schema"/>.<include refid="Base_Table"/> as d3 on d2.code = d3.parent_code 
	where d1.parent_code = #{code};
    </select>
    
    <select id="selectId" resultMap="BaseResultMap" parameterType="Object">
       select id,<include refid="Base_Column"/>
       from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       where code = #{id}
    </select>
    
    <select id="selectCategory" resultMap="CategoryResultMap" parameterType="Object">
       select d1.id as id,d1.code as code,d1.name as name,d1.descr as descr,
              d2.code as category2,d2.name as cate2_name,
              d3.code as category1,d3.name as cate1_name
       from <include refid="Base_Schema"/>.<include refid="Base_Table"/> as d1
            left join <include refid="Base_Schema"/>.<include refid="Base_Table"/> as d2 on d1.parent_code = d2.code
            left join <include refid="Base_Schema"/>.<include refid="Base_Table"/> as d3 on d2.parent_code = d3.code
       where d1.code = #{code}
    </select>
    
    <select id="selectModel" resultMap="BaseResultMap" parameterType="DictModel">
       select id,<include refid="Base_Column"/>
       from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       <include refid="Where_Clause"/>
       <include refid="Order_By"/>
       <if test="pageOn">
           limit ${rowStart},${pageLimit}
       </if>
    </select>
    
    <select id="selectAll" resultMap="BaseResultMap" parameterType="DictModel">
       select id,<include refid="Base_Column"/>
       from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       <include refid="Where_Clause"/>
    </select>
    
    <select id="selectCount" resultType="java.lang.Integer" parameterType="DictModel">
       select count(id)
       from <include refid="Base_Schema"/>.<include refid="Base_Table"/>
       <include refid="Where_Clause"/>
    </select>
</mapper>